#!/usr/bin/env python

import boto3
import os
import re
import simplejson as json
import sys
import time

from pick import pick
from prettytable import PrettyTable
from tabulate import tabulate

def print_table(rows, headers=""):
    date = os.popen("date +'%d-%m-%y %H:%M:%S'").readline()
    print(date)
    print(tabulate(rows, headers))

#################################################################################################
# EC2 SECTION
#################################################################################################
def ec2(filter=".*",interval=0):
    """ List EC2 instances in a table format"""
    interval = int(interval)
    def printlist():
        (list_instances,list_headers) = ec2list(filter=filter)
        x = PrettyTable()
        x.field_names = list_headers
        for instance in list_instances:
            x.add_row([ instance[y] for y in list_headers ])
        print(x)
    if interval:
        while True:
            os.system("clear")
            printlist()
            time.sleep(interval)
    else:
        printlist()

def ec2list(filter=".*"):
    """ Get EC2 instances """
    client = boto3.client("ec2")
    data = client.describe_instances()
    list_selected_instances = []
    list_all_instances = []
    for reservation in data["Reservations"]:
        list_all_instances.extend(reservation["Instances"])
    list_headers = [
        "name",
        "privateip",
        "id",
        "launchtime",
        "ami",
        "size",
        "state"
    ]
    for instance in list_all_instances:
        if instance["State"]["Name"] == "terminated":
            continue
        dict_instance = {
            "name": "missing-name-tag",
            "id": instance["InstanceId"],
            "size": instance["InstanceType"],
            "launchtime": str(instance["LaunchTime"]),
            "privateip": "",
            "ami" : instance["ImageId"],
            "state" : instance["State"]["Name"],

        }
        if "Tags" in instance:
            dict_instance['branch'] = ''
            for tag in instance["Tags"]:
                dict_instance[tag["Key"].lower()] = tag["Value"]
        try:
            dict_instance["privateip"] = instance["PrivateIpAddress"]
        except:
            pass
        try:
            dict_instance["publicip"] = instance["NetworkInterfaces"][0]["Association"]["PublicIp"]
        except:
            pass

        for key in dict_instance:
            if re.match("^.*"+filter+".*$", dict_instance[key]):
                list_selected_instances.append(dict_instance)
                break

    sorted_list = sorted(list_selected_instances, key=lambda d: (d['name'], d['launchtime']))
    return sorted_list, list_headers

def ec2console(instanceid, interface="public"):
   """ Query console output of new instance and ssh when ready"""
   # First we get instance info
   os.system("clear")
   date = os.popen("date +'%d-%m-%y %H:%M:%S'").readline()
   client = boto3.client("ec2")
   ready = False
   old = ""
   firsttime = True
   while not ready:
       client = boto3.client("ec2")
       data = client.get_console_output(InstanceId=instanceid)
       if "Output" not  in data:
           if firsttime:
               os.system("clear")
               os.system("cat "+os.path.dirname(os.path.realpath(__file__))+"/waitforit")
               firsttime = False
       else:
           current = data["Output"]
           if not old:
               print(current)
               old = current
           else:
               if old != current:
                   diff = re.sub(old, "", current)
                   print(diff)
           list_lines = current.split("\n")
           for line in list_lines:
               if re.match(".*loud-init.*finished.*", line):
                   print("\n\n=========\nTime for SSH\n")
                   ready = True
       if ready:
           break
       else:
           print("Sleeping 20seconds...")
           time.sleep(20)
   data = client.describe_instances(InstanceIds=[instanceid])["Reservations"][0]["Instances"][0]
   if interface == "public":
       ip = data["NetworkInterfaces"][0]["Association"]["PublicIp"]
   else:
       ip = data["PrivateIpAddress"]
   os.system("ssh "+ip)

def pick_instances(title,filter="*",response_field= "id",multiselect=False):
    """ Function to select instances """
    list_instances,list_headers = ec2list(filter=filter)
    if not list_instances:
        print("No instance matched the filter")
        sys.exit(1)
    options = []
    fields=[ "name","id", "privateip", "launchtime", "state", "ami" ]
    for instance in list_instances:
        options.append(" -- ".join([ instance[field] for field in fields]))
    all_string = "ALL of the above"
    if multiselect:
        options.append(all_string)
    selection = pick(options, title, multiselect=multiselect)
    if not selection:
        print("No host selected, exiting")
        system.exit(1)
    elif multiselect:
        response = []
        for option,index in selection:
            if option == all_string:
                response = [ x[response_field] for x in list_instances ]
                break
            response.append(list_instances[index][response_field])
        return response
    option,index = selection
    return list_instances[index][response_field]

def ssh(filter=".*",user=""):
    """ssh to all nodes matching the filter"""
    list_ips = pick_instances("Pick instance(s) to SSH into", filter, response_field="privateip", multiselect=True)
    if len(list_ips) == 1:
        if not user:
            os.system('ssh {}'.format(list_ips[0]))
        else:
            os.system('ssh {}@{}'.format(user,list_ips[0]))
    else:
        if not user:
            os.system('tssh {}'.format(' '.join(list_ips)))
        else:
            os.system('tssh -o "-l {}" {}'.format(user,' '.join(list_ips)))


def ssm(filter="*", remoteport=0, localport=0):
    """ Function to ssm into instance, adding 2 extraargs switches to port forwarding """
    instance_id = pick_instances("Pick an instance to SSM into", filter)
    message = "Pick an instance to SSM into"
    kwargs = {
        "Target": instance_id
    }
    if remoteport and localport:
        message = "Pick and instance to SSM port forward"
        kwargs = {
            "DocumentName" : "AWS-StartPortForwardingSession",
            "Parameters" : {
                "portNumber" : [remoteport],
                "localPortNumber" : [localport]
            },
            "Target" : instance_id
        }
    if remoteport and localport:
        os.system('aws ssm start-session --document-name AWS-StartPortForwardingSession --parameters portNumber={},localPortNumber={} --target {}'.format(remoteport,localport,instance_id))
    else:
        os.system('aws ssm start-session --target {}'.format(instance_id))

def terminate(filter=".*"):
    """terminate nodes matching the filter"""
    list_ids = pick_instances("Pick instance(s) to terminate", filter)
    print("Terminating instances {}".format(list_ids))
    boto3.client("ec2").terminate_instances(InstanceIds=list_ids)

#################################################################################################
# S3 SECTION
#################################################################################################
def s3purge(bucket):
    """Purge all files/version in a bucket"""
    answer = input(f"Are you sure you want to purge bucket {bucket} [Y/N]?")
    if answer != "Y":
        print("Aborting")
        return
    s3 = boto3.resource('s3')
    bucket = s3.Bucket(bucket)
    bucket.object_versions.all().delete()

def main(list_args):
    arg = list_args.pop(0)
    if list_args:
        globals()[arg](*list_args)
    else:
        globals()[arg]()

#################################################################################################
# TAGS SECTION
#################################################################################################
def getag_dict(tags):
    # TODO : handle pagination
    client = boto3.client('resourcegroupstaggingapi')
    tagfilters=[]
    for i in tags.split(","):
        tagfilters.append({
            'Key': i.split("=")[0],
            'Values': [ i.split("=")[1] ]
        })
    response = client.get_resources(TagFilters=tagfilters)["ResourceTagMappingList"]
    resources = {}
    for i in response:
        arn = i["ResourceARN"]
        name = "NO Name Tag"
        for tag in i["Tags"]:
            if tag["Key"] == "Name":
                name = tag["Value"]
                break
        resources[arn] = name
    return resources

def getag(tags):
    resources = getag_dict(tags)
    for i in sorted(resources.keys()):
        print("{} -- {}".format(i,resources[i]))

def retag(tagsrc,tagdst):
    resources = getag_dict(tagsrc)
    for i in sorted(resources.keys()):
        print("{} -- {}".format(i,resources[i]))
    print("====== The preceding will be tagged with these new tags {} ======".format(tagdst))
    answer = input("Confirm (y/n) ?")
    if answer != "y":
        print("Action cancelled per user request")
        sys.exit(1)
    client = boto3.client('resourcegroupstaggingapi')
    tags = {}
    for i in tagdst.split(","):
        tags[i.split("=")[0]] = i.split("=")[1]
    client.tag_resources(
        ResourceARNList = list(resources.keys()),
        Tags = tags
    )

#################################################################################################
# MAIN SECTION
#################################################################################################
if __name__ == "__main__":
    main(sys.argv[1:])
